#!/usr/bin/env python

import sys, json

############################################################
# Argument Options
# Header needs to have phylum -> species all separated by '_'

import argparse
from argparse import RawTextHelpFormatter

parser = argparse.ArgumentParser(description = "[] indicates optional input (order unimportant)\n\nInflates FASTA", formatter_class = RawTextHelpFormatter)
parser.add_argument("-i",
                    action = "store",
                    dest = "input",
                    metavar = "input",
                    help = "[REQUIRED] FASTA",
                    required = True)
parser.add_argument("-o",
                    action = "store",
                    dest = "output",
                    metavar = "output",
                    help = "[REQUIRED] FASTA",
                    required = True)
parser.add_argument("--cluster",
                    action = "store",
                    dest = "cluster",
                    metavar = "cluster",
                    help = "[REQUIRED] JSON",
                    required = True)
options = parser.parse_args()

############################################################

from pipits import sgtk_SeqIO as SeqIO

def re_inflate(inputFASTA, outputFASTA, dictionary):

    record = SeqIO.FastaParser(inputFASTA)
    handle_output = open(outputFASTA, "w")

    for i in record.keys():

        key = record[i].description.split(";size=")[0]
        size = record[i].description.split(";size=")[1].split(";")[0]
        seq = record[i].seq

        if int(size) != len(dictionary[key]) + 1:
            logger.error("Error: Size values in headers added by USEARCH != number of sequences in .uc")
            exit(1)

        handle_output.write(">" + key + "\n")
        handle_output.write(seq + "\n")

        for seqid in dictionary[key]:
            handle_output.write(">" + seqid + "\n")
            handle_output.write(seq + "\n")

    handle_output.close()

d = {}
with open(options.cluster, "r") as cluster:
    d = json.load(cluster)

re_inflate(options.input, options.output, d)

exit(0)
